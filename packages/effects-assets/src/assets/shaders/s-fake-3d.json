{
  "fileSummary": {
    "guid": "c14d690c57fe4f2cb86518c8859b26ac"
  },
  "exportObjects": [
    {
      "id": "9c38811e6da44aee40b6d464cf428c4d",
      "name": "fake-3d",
      "dataType": "Shader",
      "vertex": "precision highp float;\r\n\r\nattribute vec3 aPos;\r\nattribute vec2 aUV;\r\n\r\nvarying vec2 uv;\r\n\r\nuniform mat4 effects_ObjectToWorld;\r\nuniform mat4 effects_MatrixVP;\r\n\r\nvoid main() {\r\n    uv = aUV;\r\n    gl_Position = effects_MatrixVP * effects_ObjectToWorld * vec4(aPos, 1.0);\r\n}",
      "fragment": "precision highp float;\r\n\r\n#define PI 3.14159265359\r\n\r\nvarying vec2 uv;\r\n\r\nuniform sampler2D _MainTex;\r\nuniform sampler2D _DepthTex;\r\nuniform float _Focus;\r\nuniform float _ScaleX;\r\nuniform float _ScaleY;\r\nuniform float _ScaleZ;\r\nuniform float _Enlarge;\r\nuniform float _Stride;\r\nuniform float _Debug;\r\n\r\nuniform float _GlobalTime;\r\n\r\nvec3 GaussNxN(sampler2D tex, vec2 uv, vec2 stride, float sigma) {\r\n    vec3 color = vec3(0., 0., 0.);\r\n    const int r = 2 / 2;\r\n    float maxDepth = 0.0;\r\n\r\n    for(int i = -r; i <= r; i++) {\r\n        for(int j = -r; j <= r; j++) {\r\n            vec2 coord = uv + vec2(i, j) * stride;\r\n            color = texture2D(tex, coord).rgb;\r\n            if(color.r > maxDepth) {\r\n                maxDepth = color.r;\r\n            }\r\n        }\r\n    }\r\n\r\n    return vec3(maxDepth);\r\n}\r\n\r\nvec3 perspective(\r\n    vec2 uv,\r\n    vec3 cameraShift,\r\n    float convergence\r\n) {\r\n    vec3 ray_origin = vec3(uv - 0.5, 0) * (1.0 - convergence * cameraShift.z);\r\n    vec3 ray_direction = vec3(0, 0, 1);\r\n    ray_origin.xy -= cameraShift.xy * convergence;\r\n    ray_direction.xy += (uv - 0.5) * cameraShift.z + cameraShift.xy;\r\n    const int step_count = 45;\r\n    const float hit_threshold = 0.01;\r\n    ray_direction /= float(step_count);\r\n    vec3 color = vec3(0.0);\r\n    for(int i = 0; i < step_count; i++) {\r\n        ray_origin += ray_direction;\r\n        float scene_z = 1.0 - GaussNxN(_DepthTex, ray_origin.xy + 0.5, vec2(_Stride * 0.1), 1.0).x;\r\n        if(ray_origin.z > scene_z) {\r\n            if(ray_origin.z - scene_z < hit_threshold) {\r\n                break;\r\n            }\r\n            ray_origin -= ray_direction;\r\n            ray_direction /= 2.0;\r\n        }\r\n\r\n    }\r\n    color = texture2D(_MainTex, ray_origin.xy + 0.5).rgb;\r\n\r\n    if(_Debug > 0.0) {\r\n        color = GaussNxN(_DepthTex, uv, vec2(_Stride * 0.1), 1.0);\r\n    }\r\n    return color;\r\n}\r\nvoid main(void) {\r\n    float time = _GlobalTime * 0.25;\r\n    float moveX = sin(2.0 * PI * time) * 0.5;\r\n    float moveY = sin(2.0 * PI * (time + 0.25)) * 0.125;\r\n    float moveZ = 0.5 * (1.0 + sin(2.0 * PI * (time + 0.25))) * 0.5;\r\n\r\n    vec3 offset = vec3(moveX, moveY, moveZ) * vec3(_ScaleX, _ScaleY, _ScaleZ);\r\n    vec2 uv = (uv - vec2(0.5)) /\r\n        vec2(1.0 + _Enlarge * 0.125) +\r\n        vec2(0.5);\r\n    gl_FragColor = vec4(perspective(uv, vec3(offset.x, offset.y, offset.z), _Focus), 1.0);\r\n}",
      "properties": "_MainTex(\"主贴图\", 2D) = \"white\" {}\n_DepthTex(\"深度贴图\", 2D) = \"white\" {}\n_Enlarge(\"Enlarge\", Float) = 1.06\n_ScaleX(\"ScaleX\", Float) = 0.04\n_ScaleY(\"ScaleY\", Float) = 0.04\n_ScaleZ(\"ScaleZ\", Float) = 0.04\n_Focus(\"Focus\", Float) = 0.5\n_Stride(\"Stride\", Float) = 0.01\n[Toggle]_Debug(\"Debug\", Float) = 0.0\n"
    }
  ]
}
{
  "fileSummary": {
    "guid": "41e7143de72d44dea16dbc1ffbb5f3ff"
  },
  "exportObjects": [
    {
      "id": "2bb38aef323b443388fe310c93b05c46",
      "name": "universal-vfx",
      "dataType": "Shader",
      "vertex": "precision highp float;\r\n\r\nattribute vec3 aPos;\r\nattribute vec2 aUV;\r\n\r\n// Varyings\r\nvarying vec2 uv0;\r\nvarying vec2 uvDistort;\r\n\r\n// Uniforms\r\nuniform mat4 effects_ObjectToWorld;\r\nuniform mat4 effects_MatrixVP;\r\nuniform float _GlobalTime;\r\n\r\nuniform float _DistortTexUSpeed;\r\nuniform float _DistortTexVSpeed;\r\n\r\nvoid main() {\r\n    uv0 = aUV;\r\n    uvDistort = aUV + fract(vec2(_DistortTexUSpeed, _DistortTexVSpeed) * _GlobalTime);\r\n    gl_Position = effects_MatrixVP * effects_ObjectToWorld * vec4(aPos, 1.0);\r\n}",
      "fragment": "precision highp float;\r\n\r\n#define _FDISTORTTEX_ON\r\n// #define _MAINTEXUVS_POLAR\r\n#define _FMASKTEX_ON\r\n#define _FDISSOLVETEX_ON\r\n#define _FADDTEX_ON\r\n\r\n// Varyings\r\nvarying vec2 uv0;\r\nvarying vec2 uvDistort;\r\n\r\n// Uniforms\r\nuniform float _GlobalTime;\r\n\r\nuniform sampler2D _MainTex;\r\nuniform vec4 _MainColor;\r\nuniform float _MainTexAR;\r\nuniform float _MainTexUSpeed;\r\nuniform float _MainTexVSpeed;\r\n\r\nuniform float _UseAddTex;\r\nuniform sampler2D _AddTex;\r\nuniform vec4 _AddColor;\r\nuniform float _AddTexUSpeed;\r\nuniform float _AddTexVSpeed;\r\nuniform float _AddTexPower;\r\nuniform float _AddTexIntensity;\r\n\r\nuniform sampler2D _DistortTex;\r\nuniform float _DistortIntensity;\r\n\r\nuniform sampler2D _MaskTex;\r\nuniform float _MaskTexReverse;\r\nuniform float _MaskTexAR;\r\nuniform float _MaskTexUSpeed;\r\nuniform float _MaskTexVSpeed;\r\n\r\nuniform sampler2D _DissolveTex;\r\nuniform vec4 _DissolveColor;\r\nuniform float _DissolveTexUSpeed;\r\nuniform float _DissolveTexVSpeed;\r\nuniform float _DissolveTexPower;\r\nuniform float _DissolveTexIntensity;\r\nuniform float _DissolveIntensity;\r\nuniform float _DissolveSoft;\r\nuniform float _DissolveWide;\r\n\r\n\r\nvoid main() {\r\n    vec2 uvMain = uv0;\r\n\r\n    // 扭曲贴图\r\n    #ifdef _FDISTORTTEX_ON\r\n        vec2 uvDistort =  uvDistort + fract(vec2(_MainTexUSpeed, _MainTexVSpeed) * _GlobalTime);\r\n        vec4 var_DistortTex = texture2D(_DistortTex, uvDistort);\r\n        float var_DistortTexAlpha = var_DistortTex.r;\r\n        var_DistortTexAlpha *= _DistortIntensity;\r\n        vec2 DistortUV = vec2(var_DistortTexAlpha, var_DistortTexAlpha);\r\n        uvMain += DistortUV;  // 扭曲主贴图UV\r\n    #endif\r\n\r\n    // 采样主纹理\r\n    // 极坐标转化\r\n    #ifdef _MAINTEXUVS_POLAR\r\n        vec2 centerUV = uvMain - vec2(0.5, 0.5);\r\n        vec2 polarUV = vec2(length(centerUV) * 2.0, atan(centerUV.y, centerUV.x) * (1.0 / 6.28318)); // 6.28318 is 2*pi\r\n        uvMain = polarUV;\r\n    #endif\r\n    uvMain += fract(vec2(_MainTexUSpeed, _MainTexVSpeed) * _GlobalTime);\r\n    vec4 mainTex = texture2D(_MainTex, uvMain);\r\n    mainTex.rgb = (_MainTexAR == 0.0 ? mainTex.rgb : mainTex.rrr);\r\n    float mainTexAlpha = (_MainTexAR == 0.0 ? mainTex.a : mainTex.r);\r\n    vec3 color = mainTex.rgb * _MainColor.rgb;\r\n    float alpha = mainTexAlpha * _MainColor.a;\r\n\r\n    // 额外贴图\r\n    if(_UseAddTex>0.0){\r\n        vec2 uvAdd = uv0;\r\n        #ifdef _ADDTEXUVS_POLAR\r\n            vec2 addCenterUV = uvAdd - vec2(0.5, 0.5);\r\n            vec2 addPolarUV = vec2(length(addCenterUV) * 2.0, atan(addCenterUV.y, addCenterUV.x) * (1.0 / 6.28318)); // 6.28318 is 2*pi\r\n            uvAdd = addPolarUV;\r\n        #endif\r\n        uvAdd.xy += fract(vec2(_AddTexUSpeed, _AddTexVSpeed) * _GlobalTime);\r\n        vec4 var_AddTex = texture2D(_AddTex, uvAdd);\r\n        var_AddTex = clamp(pow(abs(var_AddTex), vec4(_AddTexPower)) * _AddTexIntensity,0.0,1.0);\r\n        vec3 addColor = var_AddTex.rgb;\r\n        float addAlpha = var_AddTex.a * _AddColor.a;\r\n        color = mix(color, addColor, addAlpha);\r\n    }\r\n\r\n    // 遮罩贴图\r\n    #ifdef _FMASKTEX_ON\r\n        vec2 uvMask = uv0;\r\n        #ifdef _MASKTEXUVS_POLAR\r\n            vec2 maskCenterUV = uvMask - vec2(0.5, 0.5);\r\n            vec2 maskPolarUV = vec2(length(maskCenterUV) * 2.0, atan(maskCenterUV.y, maskCenterUV.x) / (2.0 * PI));\r\n            uvMask = maskPolarUV;\r\n        #endif\r\n        uvMask += fract(vec2(_MaskTexUSpeed, _MaskTexVSpeed) * _GlobalTime);\r\n        vec4 var_MaskTex = texture2D(_MaskTex, uvMask);\r\n        float var_MaskTexAlpha = (_MaskTexAR == 0.0 ? var_MaskTex.a : var_MaskTex.r);\r\n        var_MaskTexAlpha = (_MaskTexReverse == 0.0 ? var_MaskTexAlpha : 1.0 - var_MaskTexAlpha);\r\n        alpha *= var_MaskTexAlpha;\r\n    #endif\r\n\r\n    // 溶解效果\r\n    #ifdef _FDISSOLVETEX_ON\r\n        vec2 uvDissolve = uv0;\r\n        #ifdef _DISSOLVETEXUVS_POLAR\r\n            vec2 dissolveCenterUV = uvDissolve.xy - vec2(0.5, 0.5);\r\n            vec2 dissolvePolarUV = vec2(length(dissolveCenterUV) * 2.0, atan(dissolveCenterUV.y, dissolveCenterUV.x) / (2.0 * PI));\r\n            uvDissolve.xy = dissolvePolarUV;\r\n        #endif\r\n        uvDissolve += fract(vec2(_DissolveTexUSpeed, _DissolveTexVSpeed) * _GlobalTime);\r\n        vec4 var_DissolveTex = texture2D(_DissolveTex, uvDissolve.xy);\r\n        float var_DissolveTexAlpha = var_DissolveTex.r;\r\n        var_DissolveTexAlpha = clamp(pow(abs(var_DissolveTexAlpha), _DissolveTexPower) * _DissolveTexIntensity, 0.0, 1.0);\r\n        vec3 DissolveColor = _DissolveColor.rgb * 2.0;\r\n        float DissolveIntensity = _DissolveIntensity;\r\n        //DissolveIntensity += 0.001; // Uncomment and adjust this value as needed\r\n        #ifdef _DISSOLVETEXSOFT_ON\r\n            float SoftDissolveBig = DissolveIntensity * (_DissolveSoft + 1.0);\r\n            float SoftDissolveSmall = SoftDissolveBig - _DissolveSoft;\r\n            float SoftDissolve = smoothstep(SoftDissolveSmall, SoftDissolveBig, var_DissolveTexAlpha);\r\n            color = mix(DissolveColor, color, SoftDissolve);\r\n            alpha *= SoftDissolve;\r\n        #else\r\n            float HardDissolve = DissolveIntensity * (_DissolveWide + 1.0);\r\n            float HardDissolveSmall = step(HardDissolve, var_DissolveTexAlpha);\r\n            float HardDissolveBig = step(HardDissolve - _DissolveWide, var_DissolveTexAlpha);\r\n            color = mix(DissolveColor, color, HardDissolveSmall);\r\n            alpha *= HardDissolveBig;\r\n        #endif\r\n    #endif\r\n\r\n    color *= alpha;\r\n    gl_FragColor = vec4(color, alpha);\r\n}",
      "properties": "_MainTex(\"主贴图\", 2D) = \"white\" {}\n_MainColor(\"主颜色\", Color) = (1,1,1,1)\n[Toggle]_MainTexAR (\"R通道为透明通道\", Float) = 0.0\n_MainTexUSpeed (\"U方向流动\", Float) = 0\n_MainTexVSpeed (\"V方向流动\", Float) = 0\n[Toggle]_UseAddTex(\"使用额外贴图\", Float) = 0.0\n_AddTex(\"额外贴图\", 2D) = \"white\" {}\n_AddColor(\"额外颜色\", Color) = (1,1,1,1)\n_AddTexUSpeed (\"U方向流动\", Float) = 0\n_AddTexVSpeed (\"V方向流动\", Float) = 0\n_AddTexPower (\"额外贴图锐度\", Range(0.0, 10.0)) = 1.0\n_AddTexIntensity (\"额外贴图亮度\", Range(0.0, 10.0)) = 1.0\n_DistortTex(\"扭曲贴图\", 2D) = \"white\" {}\n_DistortTexUSpeed (\"U方向流动\", Float) = 0\n_DistortTexVSpeed (\"V方向流动\", Float) = 0\n_DistortIntensity (\"扭曲程度\", Range(0.0, 1.0)) = 0.0\n_MaskTex (\"遮罩贴图\", 2D) = \"white\" {}\n[Toggle]_MaskTexReverse (\"遮罩贴图反转\", Float) = 0\n[Toggle]_MaskTexAR (\"R通道为遮罩通道\", Float) = 1\n_MaskTexUSpeed (\"U方向流动\", Float) = 0.0\n_MaskTexVSpeed (\"V方向流动\", Float) = 0.0\n_DissolveColor (\"溶解颜色\", Color) = (1.0, 1.0, 1.0, 1.0)\n_DissolveTex (\"溶解贴图\", 2D) = \"white\" {}\n_DissolveTexPower (\"溶解贴图锐度\", Range(0.0, 10.0)) = 1.0\n_DissolveTexIntensity (\"溶解贴图亮度\", Range(0.0, 10.0)) = 1.0\n_DissolveTexUSpeed (\"U方向流动\", Float) = 0.0\n_DissolveTexVSpeed (\"V方向流动\", Float) = 0.0\n_DissolveIntensity (\"溶解程度\", Range(0.0, 1.0)) = 0.0\n_DissolveWide (\"溶解宽度\", Range(0.0, 1.0)) = 0.05\n"
    }
  ]
}
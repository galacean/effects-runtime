// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class FBEffectsObjectData implements flatbuffers.IUnpackableObject<FBEffectsObjectDataT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init (i: number, bb: flatbuffers.ByteBuffer): FBEffectsObjectData {
    this.bb_pos = i;
    this.bb = bb;

    return this;
  }

  static getRootAsFBEffectsObjectData (bb: flatbuffers.ByteBuffer, obj?: FBEffectsObjectData): FBEffectsObjectData {
    return (obj || new FBEffectsObjectData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsFBEffectsObjectData (bb: flatbuffers.ByteBuffer, obj?: FBEffectsObjectData): FBEffectsObjectData {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);

    return (obj || new FBEffectsObjectData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  dataType (): string | null;
  dataType (optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  dataType (optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);

    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  data (index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);

    return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
  }

  dataLength (): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);

    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  dataArray (): Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);

    return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
  }

  static startFBEffectsObjectData (builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addDataType (builder: flatbuffers.Builder, dataTypeOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, dataTypeOffset, 0);
  }

  static addData (builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, dataOffset, 0);
  }

  static createDataVector (builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
    builder.startVector(1, data.length, 1);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt8(data[i]);
    }

    return builder.endVector();
  }

  static startDataVector (builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(1, numElems, 1);
  }

  static endFBEffectsObjectData (builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();

    return offset;
  }

  static createFBEffectsObjectData (builder: flatbuffers.Builder, dataTypeOffset: flatbuffers.Offset, dataOffset: flatbuffers.Offset): flatbuffers.Offset {
    FBEffectsObjectData.startFBEffectsObjectData(builder);
    FBEffectsObjectData.addDataType(builder, dataTypeOffset);
    FBEffectsObjectData.addData(builder, dataOffset);

    return FBEffectsObjectData.endFBEffectsObjectData(builder);
  }

  unpack (): FBEffectsObjectDataT {
    return new FBEffectsObjectDataT(
      this.dataType(),
      this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength())
    );
  }

  unpackTo (_o: FBEffectsObjectDataT): void {
    _o.dataType = this.dataType();
    _o.data = this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength());
  }
}

export class FBEffectsObjectDataT implements flatbuffers.IGeneratedObject {
  constructor (
    public dataType: string | Uint8Array | null = null,
    public data: (number)[] = []
  ) {}

  pack (builder: flatbuffers.Builder): flatbuffers.Offset {
    const dataType = (this.dataType !== null ? builder.createString(this.dataType) : 0);
    const data = FBEffectsObjectData.createDataVector(builder, this.data);

    return FBEffectsObjectData.createFBEffectsObjectData(builder,
      dataType,
      data
    );
  }
}

// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import type { FBEffectsObjectDataT } from './fbeffects-object-data.js';
import { FBEffectsObjectData } from './fbeffects-object-data.js';

export class FBEffectsPackageData implements flatbuffers.IUnpackableObject<FBEffectsPackageDataT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init (i: number, bb: flatbuffers.ByteBuffer): FBEffectsPackageData {
    this.bb_pos = i;
    this.bb = bb;

    return this;
  }

  static getRootAsFBEffectsPackageData (bb: flatbuffers.ByteBuffer, obj?: FBEffectsPackageData): FBEffectsPackageData {
    return (obj || new FBEffectsPackageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsFBEffectsPackageData (bb: flatbuffers.ByteBuffer, obj?: FBEffectsPackageData): FBEffectsPackageData {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);

    return (obj || new FBEffectsPackageData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  exportObjects (index: number, obj?: FBEffectsObjectData): FBEffectsObjectData | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);

    return offset ? (obj || new FBEffectsObjectData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
  }

  exportObjectsLength (): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);

    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startFBEffectsPackageData (builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addExportObjects (builder: flatbuffers.Builder, exportObjectsOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, exportObjectsOffset, 0);
  }

  static createExportObjectsVector (builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]);
    }

    return builder.endVector();
  }

  static startExportObjectsVector (builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endFBEffectsPackageData (builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();

    return offset;
  }

  static finishFBEffectsPackageDataBuffer (builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset);
  }

  static finishSizePrefixedFBEffectsPackageDataBuffer (builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset, undefined, true);
  }

  static createFBEffectsPackageData (builder: flatbuffers.Builder, exportObjectsOffset: flatbuffers.Offset): flatbuffers.Offset {
    FBEffectsPackageData.startFBEffectsPackageData(builder);
    FBEffectsPackageData.addExportObjects(builder, exportObjectsOffset);

    return FBEffectsPackageData.endFBEffectsPackageData(builder);
  }

  unpack (): FBEffectsPackageDataT {
    return new FBEffectsPackageDataT(
      this.bb!.createObjList<FBEffectsObjectData, FBEffectsObjectDataT>(this.exportObjects.bind(this), this.exportObjectsLength())
    );
  }

  unpackTo (_o: FBEffectsPackageDataT): void {
    _o.exportObjects = this.bb!.createObjList<FBEffectsObjectData, FBEffectsObjectDataT>(this.exportObjects.bind(this), this.exportObjectsLength());
  }
}

export class FBEffectsPackageDataT implements flatbuffers.IGeneratedObject {
  constructor (
    public exportObjects: (FBEffectsObjectDataT)[] = []
  ) {}

  pack (builder: flatbuffers.Builder): flatbuffers.Offset {
    const exportObjects = FBEffectsPackageData.createExportObjectsVector(builder, builder.createObjectOffsetList(this.exportObjects));

    return FBEffectsPackageData.createFBEffectsPackageData(builder,
      exportObjects
    );
  }
}

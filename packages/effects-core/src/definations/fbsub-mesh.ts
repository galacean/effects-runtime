// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class FBSubMesh implements flatbuffers.IUnpackableObject<FBSubMeshT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init (i: number, bb: flatbuffers.ByteBuffer): FBSubMesh {
    this.bb_pos = i;
    this.bb = bb;

    return this;
  }

  static getRootAsFBSubMesh (bb: flatbuffers.ByteBuffer, obj?: FBSubMesh): FBSubMesh {
    return (obj || new FBSubMesh()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsFBSubMesh (bb: flatbuffers.ByteBuffer, obj?: FBSubMesh): FBSubMesh {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);

    return (obj || new FBSubMesh()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  offset (): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);

    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  indexCount (): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);

    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  vertexCount (): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);

    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  static startFBSubMesh (builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addOffset (builder: flatbuffers.Builder, offset: number) {
    builder.addFieldInt32(0, offset, 0);
  }

  static addIndexCount (builder: flatbuffers.Builder, indexCount: number) {
    builder.addFieldInt32(1, indexCount, 0);
  }

  static addVertexCount (builder: flatbuffers.Builder, vertexCount: number) {
    builder.addFieldInt32(2, vertexCount, 0);
  }

  static endFBSubMesh (builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();

    return offset;
  }

  static createFBSubMesh (builder: flatbuffers.Builder, offset: number, indexCount: number, vertexCount: number): flatbuffers.Offset {
    FBSubMesh.startFBSubMesh(builder);
    FBSubMesh.addOffset(builder, offset);
    FBSubMesh.addIndexCount(builder, indexCount);
    FBSubMesh.addVertexCount(builder, vertexCount);

    return FBSubMesh.endFBSubMesh(builder);
  }

  unpack (): FBSubMeshT {
    return new FBSubMeshT(
      this.offset(),
      this.indexCount(),
      this.vertexCount()
    );
  }

  unpackTo (_o: FBSubMeshT): void {
    _o.offset = this.offset();
    _o.indexCount = this.indexCount();
    _o.vertexCount = this.vertexCount();
  }
}

export class FBSubMeshT implements flatbuffers.IGeneratedObject {
  constructor (
    public offset: number = 0,
    public indexCount: number = 0,
    public vertexCount: number = 0
  ) {}

  pack (builder: flatbuffers.Builder): flatbuffers.Offset {
    return FBSubMesh.createFBSubMesh(builder,
      this.offset,
      this.indexCount,
      this.vertexCount
    );
  }
}

// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class FBVertexChannel implements flatbuffers.IUnpackableObject<FBVertexChannelT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init (i: number, bb: flatbuffers.ByteBuffer): FBVertexChannel {
    this.bb_pos = i;
    this.bb = bb;

    return this;
  }

  static getRootAsFBVertexChannel (bb: flatbuffers.ByteBuffer, obj?: FBVertexChannel): FBVertexChannel {
    return (obj || new FBVertexChannel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsFBVertexChannel (bb: flatbuffers.ByteBuffer, obj?: FBVertexChannel): FBVertexChannel {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);

    return (obj || new FBVertexChannel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  semantic (): string | null;
  semantic (optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  semantic (optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);

    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  offset (): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);

    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  format (): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);

    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  dimension (): number {
    const offset = this.bb!.__offset(this.bb_pos, 10);

    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  normalize (): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 12);

    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  static startFBVertexChannel (builder: flatbuffers.Builder) {
    builder.startObject(5);
  }

  static addSemantic (builder: flatbuffers.Builder, semanticOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, semanticOffset, 0);
  }

  static addOffset (builder: flatbuffers.Builder, offset: number) {
    builder.addFieldInt32(1, offset, 0);
  }

  static addFormat (builder: flatbuffers.Builder, format: number) {
    builder.addFieldInt32(2, format, 0);
  }

  static addDimension (builder: flatbuffers.Builder, dimension: number) {
    builder.addFieldInt32(3, dimension, 0);
  }

  static addNormalize (builder: flatbuffers.Builder, normalize: boolean) {
    builder.addFieldInt8(4, +normalize, +false);
  }

  static endFBVertexChannel (builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();

    return offset;
  }

  static createFBVertexChannel (builder: flatbuffers.Builder, semanticOffset: flatbuffers.Offset, offset: number, format: number, dimension: number, normalize: boolean): flatbuffers.Offset {
    FBVertexChannel.startFBVertexChannel(builder);
    FBVertexChannel.addSemantic(builder, semanticOffset);
    FBVertexChannel.addOffset(builder, offset);
    FBVertexChannel.addFormat(builder, format);
    FBVertexChannel.addDimension(builder, dimension);
    FBVertexChannel.addNormalize(builder, normalize);

    return FBVertexChannel.endFBVertexChannel(builder);
  }

  unpack (): FBVertexChannelT {
    return new FBVertexChannelT(
      this.semantic(),
      this.offset(),
      this.format(),
      this.dimension(),
      this.normalize()
    );
  }

  unpackTo (_o: FBVertexChannelT): void {
    _o.semantic = this.semantic();
    _o.offset = this.offset();
    _o.format = this.format();
    _o.dimension = this.dimension();
    _o.normalize = this.normalize();
  }
}

export class FBVertexChannelT implements flatbuffers.IGeneratedObject {
  constructor (
    public semantic: string | Uint8Array | null = null,
    public offset: number = 0,
    public format: number = 0,
    public dimension: number = 0,
    public normalize: boolean = false
  ) {}

  pack (builder: flatbuffers.Builder): flatbuffers.Offset {
    const semantic = (this.semantic !== null ? builder.createString(this.semantic) : 0);

    return FBVertexChannel.createFBVertexChannel(builder,
      semantic,
      this.offset,
      this.format,
      this.dimension,
      this.normalize
    );
  }
}
